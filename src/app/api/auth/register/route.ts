// import { NextRequest, NextResponse } from 'next/server';

// const users: { email: string; password: string }[] = [];

// export async function POST(req: NextRequest) {
//     try {
//         const { email, password } = await req.json();

//         const existingUser = users.find(user => user.email === email);
//         if (existingUser) {
//             return NextResponse.json(
//                 { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
//                 { status: 400 }
//             );
//         }

//         users.push({ email, password });

//         return NextResponse.json(
//             { message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!' },
//             { status: 201 }
//         );
//     } catch (error) {
//         return NextResponse.json(
//             { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
//             { status: 500 }
//         );
//     }
// }



import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../lib/prisma';  // ‚Üê –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Prisma (–∫–∞–∫ –≤ contacts)
import bcrypt from 'bcrypt';  // ‚Üê –î–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π

// üî• –£–î–ê–õ–ò–õ–ò –ú–ê–°–°–ò–í! –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤ –ë–î
// const users: { email: string; password: string }[] = [];  ‚Üê –ë–´–õ–û

export async function POST(req: NextRequest) {
    try {
        const { email, password } = await req.json();

        // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π email –≤ –±–∞–∑–µ?
        // prisma.user.findUnique - –∏—â–µ—Ç –û–î–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –ø–æ–ª—é
        const existingUser = await prisma.user.findUnique({
            where: { email }  // ‚Üê "where email = —Ç–æ—Ç_—á—Ç–æ_–ø—Ä–∏—à–µ–ª"
        });

        if (existingUser) {
            return NextResponse.json(
                { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
                { status: 400 }
            );
        }

        // 2Ô∏è‚É£ –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å (10 - —ç—Ç–æ "—Å–æ–ª–µ–Ω–æ—Å—Ç—å", —á–µ–º –±–æ–ª—å—à–µ - —Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
        const hashedPassword = await bcrypt.hash(password, 10);
        
        // ‚ùì –ß–¢–û –¢–ê–ö–û–ï –•–ï–®?
        // –ü–∞—Ä–æ–ª—å "123456" ‚Üí —Ö–µ—à "$2b$10$abcd1234..." (–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!)
        // –î–∞–∂–µ –µ—Å–ª–∏ —Ö–∞–∫–µ—Ä —É–∫—Ä–∞–¥–µ—Ç –±–∞–∑—É, –æ–Ω –Ω–µ —É–∑–Ω–∞–µ—Ç –ø–∞—Ä–æ–ª—å

        // 3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        // prisma.user.create - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É users
        const newUser = await prisma.user.create({
            data: {
                email,
                password: hashedPassword  // ‚Üê –°–æ—Ö—Ä–∞–Ω—è–µ–º –•–ï–®, –∞ –Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å!
            }
        });

        // 4Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö (–ë–ï–ó –ø–∞—Ä–æ–ª—è!)
        return NextResponse.json(
            { 
                message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!',
                user: { 
                    id: newUser.id, 
                    email: newUser.email 
                    // ‚Üê –ü–∞—Ä–æ–ª—å –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É!
                }
            },
            { status: 201 }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        return NextResponse.json(
            { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
            { status: 500 }
        );
    }
}