import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../lib/prisma';
import bcrypt from 'bcrypt';

// üî• –£–î–ê–õ–ò–õ–ò –ú–ê–°–°–ò–í!
// const users: { email: string; password: string }[] = [];  ‚Üê –ë–´–õ–û

export async function POST(req: NextRequest) {
    try {
        const { email, password } = await req.json();

        // 1Ô∏è‚É£ –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const user = await prisma.user.findUnique({
            where: { email }
        });

        // 2Ô∏è‚É£ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ—à–∏–±–∫–∞
        if (!user) {
            return NextResponse.json(
                { error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' },
                { status: 401 }
            );
        }

        // 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é bcrypt.compare
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å —Ö–µ—à–µ–º –∏–∑ –±–∞–∑—ã
        const isPasswordValid = await bcrypt.compare(password, user.password);
        
        // ‚ùì –ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢?
        // bcrypt.compare("123456", "$2b$10$abcd1234...") 
        // ‚Üë bcrypt —Ö–µ—à–∏—Ä—É–µ—Ç "123456" —Å–Ω–æ–≤–∞ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —Ö–µ—à–µ–º –∏–∑ –ë–î
        // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç - true, –∏–Ω–∞—á–µ - false

        if (!isPasswordValid) {
            return NextResponse.json(
                { error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' },
                { status: 401 }
            );
        }

        // 4Ô∏è‚É£ –£—Å–ø–µ—Ö! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π
        // TODO: –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ —Å–µ—Å—Å–∏—é
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return NextResponse.json(
            { 
                message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!', 
                user: { 
                    id: user.id, 
                    email: user.email 
                    // ‚Üê –ü–∞—Ä–æ–ª—å –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º!
                }
            },
            { status: 200 }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        return NextResponse.json(
            { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
            { status: 500 }
        );
    }
}