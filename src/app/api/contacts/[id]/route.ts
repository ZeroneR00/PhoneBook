import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../lib/prisma';

// PUT - –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–æ–ª—å–∫–æ —Å–≤–æ–π!)
export async function PUT(
    request: NextRequest,
    { params }: { params: { id: string } }
) {
    try {
        const id = parseInt(params.id);
        const { userId, ...updates } = await request.json();
        
        // üÜï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (userId) {
            const contact = await prisma.contact.findUnique({
                where: { id }
            });
            
            if (!contact) {
                return NextResponse.json(
                    { error: '–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
                    { status: 404 }
                );
            }
            
            // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if (contact.userId !== parseInt(userId)) {
                return NextResponse.json(
                    { error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É' },
                    { status: 403 }
                );
            }
        }

        const updatedContact = await prisma.contact.update({
            where: { id },
            data: updates
        });

        return NextResponse.json(updatedContact);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        return NextResponse.json(
            { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç' },
            { status: 500 }
        );
    }
}

// DELETE - —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–æ–ª—å–∫–æ —Å–≤–æ–π!)
export async function DELETE(
    request: NextRequest,
    { params }: { params: { id: string } }
) {
    try {
        const id = parseInt(params.id);
        const userId = request.nextUrl.searchParams.get('userId');
        
        // üÜï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (userId) {
            const contact = await prisma.contact.findUnique({
                where: { id }
            });
            
            if (!contact) {
                return NextResponse.json(
                    { error: '–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
                    { status: 404 }
                );
            }
            
            // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if (contact.userId !== parseInt(userId)) {
                return NextResponse.json(
                    { error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É' },
                    { status: 403 }
                );
            }
        }

        await prisma.contact.delete({
            where: { id }
        });

        return NextResponse.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        return NextResponse.json(
            { error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç' },
            { status: 500 }
        );
    }
}