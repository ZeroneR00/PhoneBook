import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../lib/prisma';

// GET - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¢–ï–ö–£–©–ï–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request: NextRequest) {
    try {
        // üÜï –ü–†–û–ë–õ–ï–ú–ê: –ö–∞–∫ —É–∑–Ω–∞—Ç—å –ö–¢–û –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å?
        // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –±–µ—Ä—ë–º userId –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ —Å–µ—Å—Å–∏–∏ (—Å–¥–µ–ª–∞–µ–º –ø–æ–∑–∂–µ)
        
        const userId = request.nextUrl.searchParams.get('userId');
        
        if (!userId) {
            return NextResponse.json(
                { error: '–ù–µ —É–∫–∞–∑–∞–Ω userId' },
                { status: 400 }
            );
        }

        // ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ userId!
        const contacts = await prisma.contact.findMany({
            where: {
                userId: parseInt(userId)  // ‚Üê –¢–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
            },
            orderBy: {
                createdAt: 'desc'
            }
        });
        
        return NextResponse.json(contacts);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
        return NextResponse.json(
            { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã' },
            { status: 500 }
        );
    }
}

// POST - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –¢–ï–ö–£–©–ï–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function POST(request: NextRequest) {
    try {
        const { name, phone, userId } = await request.json();
        
        // üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ userId –ø–µ—Ä–µ–¥–∞–Ω
        if (!userId) {
            return NextResponse.json(
                { error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
                { status: 400 }
            );
        }
        
        if (!name || !phone) {
            return NextResponse.json(
                { error: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
                { status: 400 }
            );
        }

        // ‚úÖ –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ —Å–≤—è–∑—å—é –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const newContact = await prisma.contact.create({
            data: {
                name,
                phone,
                userId: parseInt(userId)  // ‚Üê –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!
            }
        });

        return NextResponse.json(newContact, { status: 201 });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        return NextResponse.json(
            { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç' },
            { status: 500 }
        );
    }
}