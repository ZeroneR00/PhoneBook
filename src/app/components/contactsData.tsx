// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
export interface Contact {
    id: number;
    name: string;
    phone: string;
    userId: number;  // üÜï –î–æ–±–∞–≤–∏–ª–∏ userId
    createdAt?: Date;
    updatedAt?: Date;
}

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã
export const phoneBookAPI = {
    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // üÜï –¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è userId!
    getAllContacts: async (userId: number): Promise<Contact[]> => {
        try {
            const response = await fetch(`/api/contacts?userId=${userId}`);
            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã');
            }
            const contacts = await response.json();
            return contacts;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
            return [];
        }
    },
    
    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
    // üÜï –¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è userId!
    addContact: async (contactData: { name: string; phone: string; userId: number }): Promise<Contact | null> => {
        try {
            const response = await fetch('/api/contacts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(contactData),
            });

            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç');
            }

            const newContact = await response.json();
            return newContact;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
            return null;
        }
    },
    
    // –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ ID
    // üÜï –î–æ–±–∞–≤–∏–ª–∏ userId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    deleteContact: async (id: number, userId: number): Promise<boolean> => {
        try {
            const response = await fetch(`/api/contacts/${id}?userId=${userId}`, {
                method: 'DELETE',
            });

            return response.ok;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
            return false;
        }
    },
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
    // üÜï –î–æ–±–∞–≤–∏–ª–∏ userId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    updateContact: async (id: number, updates: { name?: string; phone?: string }, userId: number): Promise<Contact | null> => {
        try {
            const response = await fetch(`/api/contacts/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ ...updates, userId }),
            });

            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç');
            }

            const updatedContact = await response.json();
            return updatedContact;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
            return null;
        }
    }
};