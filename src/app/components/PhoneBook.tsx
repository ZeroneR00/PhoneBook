"use client"

import { useState, useEffect } from "react";
import { phoneBookAPI, Contact } from "./contactsData";
import EditableInput from "./EditableInput";
import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger,
} from "@/components/ui/accordion"
import {
    Card,
    CardAction,
    CardContent,
    CardDescription,
    CardFooter,
    CardHeader,
    CardTitle,
} from "@/components/ui/card"
import Header from "./Header";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";

export default function PhoneBook() {
    const [contacts, setContacts] = useState<Contact[]>([]);
    const [editingId, setEditingId] = useState<number | null>(null);
    const [newName, setNewName] = useState<string>("");
    const [newPhone, setNewPhone] = useState<string>("");
    const [loading, setLoading] = useState<boolean>(true);
    const [loginForm, actualLoginForm] = useState<boolean>(false);

    // üÜï –í–ê–ñ–ù–û: –•—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ!
    const [currentUser, setCurrentUser] = useState<{ id: number; email: string } | null>(null);
    const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);

    const [isLoginMode, setIsLoginMode] = useState<boolean>(true); // true = –≤—Ö–æ–¥, false = —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    const [email, setEmail] = useState<string>("");
    const [password, setPassword] = useState<string>("");
    const [confirmPassword, setConfirmPassword] = useState<string>("");
    const [authError, setAuthError] = useState<string>("");



    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
    useEffect(() => {
        if (isLoggedIn && currentUser) {
            loadContacts();
        }
    }, [isLoggedIn, currentUser]);

    const loadContacts = async () => {
        if (!currentUser) return;

        setLoading(true);
        try {
            // üÜï –ü–µ—Ä–µ–¥–∞—ë–º userId!
            const contactsList = await phoneBookAPI.getAllContacts(currentUser.id);
            setContacts(contactsList);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:", error);
        } finally {
            setLoading(false);
        }
    };

    const editNameContactHandler = async (id: number, newName: string) => {
        if (!currentUser) return;
        
        try {
            // üÜï –ü–µ—Ä–µ–¥–∞—ë–º userId!
            await phoneBookAPI.updateContact(id, { name: newName }, currentUser.id);
            await loadContacts();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏:", error);
        }
    };

    const editNumContactHandler = async (id: number, newPhone: string) => {
        if (!currentUser) return;
        
        try {
            // üÜï –ü–µ—Ä–µ–¥–∞—ë–º userId!
            await phoneBookAPI.updateContact(id, { phone: newPhone }, currentUser.id);
            await loadContacts();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", error);
        }
    };

    const deleteIdHandler = async (id: number) => {
        if (!currentUser) return;
        
        try {
            // üÜï –ü–µ—Ä–µ–¥–∞—ë–º userId!
            const success = await phoneBookAPI.deleteContact(id, currentUser.id);
            if (success) {
                await loadContacts();
            } else {
                alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:", error);
        }
    };

    const startEdit = (id: number) => {
        setEditingId(id);
        console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å –¥–ª—è ID: ' + id);
    };

    const stopEdit = () => {
        setEditingId(null);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    const addContactHandler = async () => {
        if (!currentUser) {
            alert("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!");
            return;
        }
        
        if (newName.trim() === "" || newPhone.trim() === "") {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
            return;
        }

        try {
            // üÜï –ü–µ—Ä–µ–¥–∞—ë–º userId!
            const result = await phoneBookAPI.addContact({
                name: newName,
                phone: newPhone,
                userId: currentUser.id  // ‚Üê –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            });

            if (result) {
                await loadContacts();
                setNewName("");
                setNewPhone("");
            } else {
                alert("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:", error);
            alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞");
        }
    };

    const handleRegister = async () => {
        setAuthError("");

        if (!email || !password || !confirmPassword) {
            setAuthError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
            return;
        }

        if (password !== confirmPassword) {
            setAuthError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!");
            return;
        }

        if (password.length < 6) {
            setAuthError("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤!");
            return;
        }

        try {
            const response = await fetch('/api/auth/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password })
            });

            const data = await response.json();

            if (response.ok) {
                alert("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.");
                setIsLoginMode(true);
                setEmail("");
                setPassword("");
                setConfirmPassword("");
            } else {
                setAuthError(data.error || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
            }
        } catch (error) {
            setAuthError("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
            console.error(error);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
   // üÜï –í–ê–ñ–ù–û: –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ª–æ–≥–∏–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
   const handleLogin = async () => {
    setAuthError("");

    if (!email || !password) {
        setAuthError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
        return;
    }

    try {
        const response = await fetch('/api/auth/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, password })
        });

        const data = await response.json();

        if (response.ok) {
            // üÜï –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ state!
            setCurrentUser(data.user);
            setIsLoggedIn(true);
            actualLoginForm(false);
            alert(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${data.user.email}!`);
        } else {
            setAuthError(data.error || "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
        }
    } catch (error) {
        setAuthError("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
        console.error(error);
    }
};

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤—Ö–æ–¥–æ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    const toggleAuthMode = () => {
        setIsLoginMode(!isLoginMode);
        setAuthError("");
        setConfirmPassword("");
    };

    // üÜï –ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    if (!isLoggedIn) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</div>
                <div></div>
                <Card className="w-full max-w-sm">
                        <CardHeader>
                            <CardTitle>
                                {isLoginMode ? "–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç" : "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"}
                            </CardTitle>
                            <CardDescription>
                                {isLoginMode
                                    ? "–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞"
                                    : "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç"}
                            </CardDescription>
                        </CardHeader>

                        <CardContent>
                            <div className="flex flex-col gap-4">
                                <div className="grid gap-2">
                                    <Label htmlFor="email">Email</Label>
                                    <Input
                                        id="email"
                                        type="email"
                                        placeholder="m@example.com"
                                        value={email}
                                        onChange={(e) => setEmail(e.target.value)}
                                        required
                                    />
                                </div>

                                <div className="grid gap-2">
                                    <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
                                    <Input
                                        id="password"
                                        type="password"
                                        value={password}
                                        onChange={(e) => setPassword(e.target.value)}
                                        required
                                    />
                                </div>

                                {!isLoginMode && (
                                    <div className="grid gap-2">
                                        <Label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Label>
                                        <Input
                                            id="confirmPassword"
                                            type="password"
                                            value={confirmPassword}
                                            onChange={(e) => setConfirmPassword(e.target.value)}
                                            required
                                        />
                                    </div>
                                )}

                                {authError && (
                                    <div className="text-red-500 text-sm bg-red-50 p-2 rounded">
                                        {authError}
                                    </div>
                                )}

                                <Button
                                    onClick={isLoginMode ? handleLogin : handleRegister}
                                    className="w-full"
                                >
                                    {isLoginMode ? "–í–æ–π—Ç–∏" : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
                                </Button>
                            </div>
                        </CardContent>

                        <CardFooter className="flex flex-col gap-2">
                            <Button
                                variant="link"
                                onClick={toggleAuthMode}
                                className="w-full"
                            >
                                {isLoginMode
                                    ? "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å"
                                    : "–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π–¥–∏—Ç–µ"}
                            </Button>

                            {isLoginMode && (
                                <Button variant="outline" className="w-full">
                                    –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
                                </Button>
                            )}
                        </CardFooter>
                    </Card>
            </div>
        );
    }

    if (loading) {
        return <div className="text-center p-4">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...</div>;
    }

    return (
        <div>

            <div className="flex flex-col w-full text-left border-collapse w-[80%]">

                <table className="flex flex-col w-full text-left border-collapse w-[80%]">
                    <thead className="px-4 py-2">
                        <tr className="border-b border-gray-300">
                            <th className="px-4 py-2">Name</th>
                            <th className="px-4 py-2">Phone</th>
                            <th className="px-4 py-2">ID</th>
                        </tr>
                    </thead>
                    <tbody>
                        {contacts.length === 0 ? (
                            <tr>
                                <td colSpan={4} className="px-4 py-2 text-center text-gray-500">
                                    –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π!
                                </td>
                            </tr>
                        ) : (
                            contacts.map((contact) => (
                                <EditableInput
                                    key={contact.id}
                                    contact={contact}
                                    editingId={editingId}
                                    onStartEdit={startEdit}
                                    onStopEdit={stopEdit}
                                    onEditName={editNameContactHandler}
                                    onEditPhone={editNumContactHandler}
                                    onDeleteId={deleteIdHandler}
                                />
                            ))
                        )}
                    </tbody>
                </table>

                <Accordion type="single" collapsible>
                    <AccordionItem value="item-1">
                        <AccordionTrigger>
                            <div className="bg-blue-500 text-white px-4 py-2 hover:scale-105 rounded-md mx-2">
                                Add Contact
                            </div>
                        </AccordionTrigger>
                        <AccordionContent>
                            <div className="mt-5 mb-5 bg-gray-900 w-160 p-12 border border-gray-400">
                                <div className="flex flex-row">
                                    <div>
                                        <div className="mb-5">
                                            <span className="mr-14">–í–≤–µ–¥–∏—Ç–µ –∏–º—è</span>
                                            <input
                                                type="text"
                                                className="px-2 py-1 bg-zinc-200 w-52 text-black"
                                                placeholder="Name"
                                                value={newName}
                                                onChange={(e) => setNewName(e.target.value)}
                                            />
                                        </div>
                                        <div>
                                            <span className="mr-7">–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω</span>
                                            <input
                                                type="text"
                                                className="px-2 py-1 bg-zinc-200 w-52 text-black"
                                                placeholder="Phone"
                                                value={newPhone}
                                                onChange={(e) => setNewPhone(e.target.value)}
                                            />
                                        </div>
                                    </div>
                                    <button
                                        className="bg-amber-900 text-white px-4 py-2 rounded-md mx-2 ml-20 w-20 hover:scale-105"
                                        onClick={addContactHandler}
                                    >
                                        Add
                                    </button>
                                </div>
                            </div>
                        </AccordionContent>
                    </AccordionItem>
                </Accordion>

                {loginForm && <div className="flex justify-center items-center mt-10">
                    <Card className="w-full max-w-sm">
                        <CardHeader>
                            <CardTitle>
                                {isLoginMode ? "–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç" : "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"}
                            </CardTitle>
                            <CardDescription>
                                {isLoginMode
                                    ? "–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞"
                                    : "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç"}
                            </CardDescription>
                        </CardHeader>

                        <CardContent>
                            <div className="flex flex-col gap-4">
                                <div className="grid gap-2">
                                    <Label htmlFor="email">Email</Label>
                                    <Input
                                        id="email"
                                        type="email"
                                        placeholder="m@example.com"
                                        value={email}
                                        onChange={(e) => setEmail(e.target.value)}
                                        required
                                    />
                                </div>

                                <div className="grid gap-2">
                                    <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
                                    <Input
                                        id="password"
                                        type="password"
                                        value={password}
                                        onChange={(e) => setPassword(e.target.value)}
                                        required
                                    />
                                </div>

                                {!isLoginMode && (
                                    <div className="grid gap-2">
                                        <Label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Label>
                                        <Input
                                            id="confirmPassword"
                                            type="password"
                                            value={confirmPassword}
                                            onChange={(e) => setConfirmPassword(e.target.value)}
                                            required
                                        />
                                    </div>
                                )}

                                {authError && (
                                    <div className="text-red-500 text-sm bg-red-50 p-2 rounded">
                                        {authError}
                                    </div>
                                )}

                                <Button
                                    onClick={isLoginMode ? handleLogin : handleRegister}
                                    className="w-full"
                                >
                                    {isLoginMode ? "–í–æ–π—Ç–∏" : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
                                </Button>
                            </div>
                        </CardContent>

                        <CardFooter className="flex flex-col gap-2">
                            <Button
                                variant="link"
                                onClick={toggleAuthMode}
                                className="w-full"
                            >
                                {isLoginMode
                                    ? "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å"
                                    : "–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π–¥–∏—Ç–µ"}
                            </Button>

                            {isLoginMode && (
                                <Button variant="outline" className="w-full">
                                    –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
                                </Button>
                            )}
                        </CardFooter>
                    </Card>
                </div>}
            </div>
        </div>
    );
}